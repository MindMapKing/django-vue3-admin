"""
Django 项目主配置文件

这是 Django-Vue3-Admin 项目的核心配置文件，包含了项目运行所需的所有配置项。
该文件定义了数据库连接、中间件、应用配置、日志配置、REST API配置等核心设置。

主要配置模块：
1. 基础 Django 配置（SECRET_KEY、DEBUG、ALLOWED_HOSTS等）
2. 应用和中间件配置
3. 数据库配置
4. 国际化和时区配置
5. 静态文件和媒体文件配置
6. 跨域配置（CORS）
7. WebSocket 配置（Django Channels）
8. 日志配置
9. REST Framework 配置
10. JWT 认证配置
11. Swagger API 文档配置
12. 验证码配置
13. 插件系统配置

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import sys
from pathlib import Path
from datetime import timedelta

# 构建项目内部路径的基础目录
# 例如: BASE_DIR / 'subdir'
BASE_DIR = Path(__file__).resolve().parent.parent

# ================================================= #
# ******************** 动态配置 ******************** #
# ================================================= #

# 从环境配置文件导入配置变量
# 这里导入的变量会覆盖下面的默认配置
from conf.env import *

# ================================================= #
# ******************** 基础配置 ******************** #
# ================================================= #

# Django 快速开发配置 - 不适用于生产环境
# 参考: https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# 安全警告: 在生产环境中请保密此密钥!
# 用于加密签名、会话、密码重置令牌等
SECRET_KEY = "django-insecure--z8%exyzt7e_%i@1+#1mm=%lb5=^fx_57=1@a+_y7bg5-w%)sm"

# 初始化插件路径到 Python 环境变量中
# 插件目录路径
PLUGINS_PATH = os.path.join(BASE_DIR, "plugins")
# 将插件根目录添加到 Python 路径
sys.path.insert(0, os.path.join(PLUGINS_PATH))

# 动态加载所有插件子目录到 Python 路径
# 遍历插件目录，将每个插件文件夹添加到系统路径中
# 列表推导式
[
    sys.path.insert(0, os.path.join(PLUGINS_PATH, ele))
    for ele in os.listdir(PLUGINS_PATH)
    if os.path.isdir(os.path.join(PLUGINS_PATH, ele)) and not ele.startswith("__")
]

# 安全警告: 不要在生产环境中开启调试模式!
# 调试模式开关，从环境变量获取，默认为 True
DEBUG = locals().get("DEBUG", True)

# 允许访问的主机列表
# 在生产环境中应该设置为具体的域名，而不是 "*"
ALLOWED_HOSTS = locals().get("ALLOWED_HOSTS", ["*"])

# 列权限功能需要排除的应用程序
# 这些应用不会被列权限系统管理
COLUMN_EXCLUDE_APPS = ['channels', 'captcha'] + locals().get("COLUMN_EXCLUDE_APPS", [])

# ================================================= #
# ******************** 应用配置 ******************** #
# ================================================= #

# Django 应用程序注册列表
# 定义项目中使用的所有 Django 应用
INSTALLED_APPS = [
    "django.contrib.auth",          # Django 认证系统
    "django.contrib.contenttypes",  # 内容类型框架
    "django.contrib.sessions",      # 会话框架
    "django.contrib.messages",      # 消息框架
    "django.contrib.staticfiles",   # 静态文件管理
    "django_comment_migrate",       # 数据库迁移注释工具
    "rest_framework",               # Django REST Framework
    "django_filters",               # Django 过滤器
    "corsheaders",                  # 跨域资源共享 (CORS) 支持
    "drf_yasg",                     # Swagger/OpenAPI 文档生成
    "captcha",                      # 验证码功能
    "channels",                     # WebSocket 和异步支持
    "dvadmin.system",               # 系统核心应用
]

# ================================================= #
# ******************** 中间件配置 ******************* #
# ================================================= #

# Django 中间件配置列表
# 按照执行顺序排列，处理请求和响应
MIDDLEWARE = [
    "dvadmin.utils.middleware.HealthCheckMiddleware",     # 健康检查中间件
    "django.middleware.security.SecurityMiddleware",      # 安全中间件
    "whitenoise.middleware.WhiteNoiseMiddleware",         # 静态文件服务中间件
    "django.contrib.sessions.middleware.SessionMiddleware", # 会话中间件
    "corsheaders.middleware.CorsMiddleware",              # CORS 跨域中间件
    "django.middleware.common.CommonMiddleware",          # 通用中间件
    "django.middleware.csrf.CsrfViewMiddleware",          # CSRF 保护中间件
    "django.contrib.auth.middleware.AuthenticationMiddleware", # 认证中间件
    "django.contrib.messages.middleware.MessageMiddleware",    # 消息中间件
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # 点击劫持保护中间件
    "dvladmin.utils.middleware.ApiLoggingMiddleware",          # API 日志记录中间件
]

# ================================================= #
# ******************** URL 和模板配置 *************** #
# ================================================= #

# 根 URL 配置模块
ROOT_URLCONF = "application.urls"

# Django 模板配置
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],  # 模板文件目录
        "APP_DIRS": True,  # 是否在应用目录中查找模板
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",    # 调试上下文处理器
                "django.template.context_processors.request",  # 请求上下文处理器
                "django.contrib.auth.context_processors.auth", # 认证上下文处理器
                "django.contrib.messages.context_processors.messages", # 消息上下文处理器
            ],
        },
    },
]

# WSGI 应用程序入口点
WSGI_APPLICATION = "application.wsgi.application"

# ================================================= #
# ******************** 数据库配置 ******************* #
# ================================================= #

# 数据库配置
# 使用从环境配置文件导入的数据库连接参数
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": DATABASE_ENGINE,      # 数据库引擎 (如: django.db.backends.mysql)
        "NAME": DATABASE_NAME,          # 数据库名称
        "USER": DATABASE_USER,          # 数据库用户名
        "PASSWORD": DATABASE_PASSWORD,  # 数据库密码
        "HOST": DATABASE_HOST,          # 数据库主机地址
        "PORT": DATABASE_PORT,          # 数据库端口
    }
}

# 自定义用户模型配置
# 指定系统使用的用户模型为 system 应用下的 Users 模型
AUTH_USER_MODEL = "system.Users"
# 用户名字段配置
USERNAME_FIELD = "username"

# ================================================= #
# ******************** 密码验证配置 ***************** #
# ================================================= #

# 密码验证器配置
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        # 用户属性相似性验证器 - 密码不能与用户信息太相似
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        # 最小长度验证器 - 密码最小长度要求
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        # 常见密码验证器 - 密码不能是常见密码
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        # 纯数字密码验证器 - 密码不能全是数字
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# ================================================= #
# ******************** 国际化配置 ******************* #
# ================================================= #

# 国际化设置
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# 语言代码配置 - 设置为简体中文
LANGUAGE_CODE = "zh-hans"

# 时区配置 - 设置为上海时区（东八区）
TIME_ZONE = "Asia/Shanghai"

# 启用国际化支持
USE_I18N = True

# 启用本地化支持
USE_L10N = True

# 时区感知设置 - 设置为 False 使用本地时间
USE_TZ = False

# ================================================= #
# ******************** 静态文件配置 ***************** #
# ================================================= #

# 静态文件配置
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# 静态文件 URL 前缀
STATIC_URL = "/static/"

# Django 静态文件目录配置
# 开发环境下静态文件的存放位置
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# 媒体文件根目录 - 用户上传文件的存储位置
MEDIA_ROOT = "media"
# 媒体文件 URL 前缀 - 用户可以通过此 URL 访问上传的文件
MEDIA_URL = "/media/"

# 静态文件查找器配置
# 添加以下配置后就不用写 {% load staticfiles %}，可以直接引用静态文件
STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",  # 文件系统查找器
    "django.contrib.staticfiles.finders.AppDirectoriesFinder"  # 应用目录查找器
)

# 生产环境静态文件收集目录配置（部署时使用）
# 收集静态文件时，必须先注释 MEDIA_ROOT 和 STATICFILES_DIRS
# 使用命令: python manage.py collectstatic
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# ================================================= #
# ******************* 跨域配置 (CORS) *************** #
# ================================================= #

# 跨域资源共享 (CORS) 配置
# 允许所有来源的跨域请求（开发环境配置，生产环境应限制具体域名）
CORS_ORIGIN_ALLOW_ALL = True

# 允许跨域请求携带 Cookie
# 指明在跨域访问中，后端是否支持对 cookie 的操作
CORS_ALLOW_CREDENTIALS = True

# ===================================================== #
# ***************** WebSocket 配置 (Channels) ********** #
# ===================================================== #

# ASGI 应用程序配置 - 用于 WebSocket 和异步支持
ASGI_APPLICATION = 'application.asgi.application'

# Channel Layer 配置 - 用于 WebSocket 消息传递
# 开发环境使用内存通道层
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# 生产环境 Redis Channel Layer 配置（已注释）
# 生产环境建议使用 Redis 作为 Channel Layer 后端
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)], # 需要修改为实际 Redis 地址
#         },
#     },
# }

# ================================================= #
# ********************* 日志配置 ******************* #
# ================================================= #

# 日志文件路径配置
SERVER_LOGS_FILE = os.path.join(BASE_DIR, "logs", "server.log")  # 服务器日志文件
ERROR_LOGS_FILE = os.path.join(BASE_DIR, "logs", "error.log")    # 错误日志文件
LOGS_FILE = os.path.join(BASE_DIR, "logs")                       # 日志目录

# 确保日志目录存在
if not os.path.exists(os.path.join(BASE_DIR, "logs")):
    os.makedirs(os.path.join(BASE_DIR, "logs"))

# 日志格式定义
# 标准日志格式: [2020-04-22 23:33:01][module.function():16] [INFO] 这是一条日志
# 格式说明: [日期时间][模块.函数名():行号] [日志级别] 日志信息
STANDARD_LOG_FORMAT = (
    "[%(asctime)s][%(name)s.%(funcName)s():%(lineno)d] [%(levelname)s] %(message)s"
)
# 控制台日志格式
CONSOLE_LOG_FORMAT = (
    "[%(asctime)s][%(name)s.%(funcName)s():%(lineno)d] [%(levelname)s] %(message)s"
)

# Django 日志配置
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # 不禁用现有日志记录器
    "formatters": {  # 日志格式化器
        "standard": {"format": STANDARD_LOG_FORMAT},
        "console": {
            "format": CONSOLE_LOG_FORMAT,
            "datefmt": "%Y-%m-%d %H:%M:%S",  # 日期格式
        },
        "file": {
            "format": CONSOLE_LOG_FORMAT,
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {  # 日志处理器
        "file": {  # 文件日志处理器
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",  # 轮转文件处理器
            "filename": SERVER_LOGS_FILE,  # 日志文件路径
            "maxBytes": 1024 * 1024 * 100,  # 单个日志文件最大大小: 100 MB
            "backupCount": 5,  # 最多备份 5 个文件
            "formatter": "standard",
            "encoding": "utf-8",
        },
        "error": {  # 错误日志处理器
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": ERROR_LOGS_FILE,
            "maxBytes": 1024 * 1024 * 100,  # 100 MB
            "backupCount": 3,  # 最多备份 3 个文件
            "formatter": "standard",
            "encoding": "utf-8",
        },
        "console": {  # 控制台日志处理器
            "level": "INFO",
            "class": "logging.StreamHandler",  # 流处理器，输出到控制台
            "formatter": "console",
        },
    },
    "loggers": {  # 日志记录器配置
        "": {  # 根日志记录器
            "handlers": ["console", "error", "file"],
            "level": "INFO",
        },
        "django": {  # Django 框架日志
            "handlers": ["console", "error", "file"],
            "level": "INFO",
            "propagate": False,  # 不向上级日志记录器传播
        },
        'django.db.backends': {  # 数据库后端日志
            'handlers': ["console", "error", "file"],
            'propagate': False,
            'level': "INFO"
        },
        "uvicorn.error": {  # Uvicorn 错误日志
            "level": "INFO",
            "handlers": ["console", "error", "file"],
        },
        "uvicorn.access": {  # Uvicorn 访问日志
            "handlers": ["console", "error", "file"],
            "level": "INFO"
        },
    },
}

# ================================================= #
# *************** REST Framework 配置 ************** #
# ================================================= #

# Django REST Framework 全局配置（同java中的spring）
REST_FRAMEWORK = {
    # 默认解析器类配置
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',      # JSON 解析器
        'rest_framework.parsers.MultiPartParser', # 多部分表单解析器（文件上传）
    ),
    # 日期时间格式配置
    "DATETIME_FORMAT": "%Y-%m-%d %H:%M:%S",  # 日期时间格式
    "DATE_FORMAT": "%Y-%m-%d",               # 日期格式
    # 默认过滤器后端配置
    "DEFAULT_FILTER_BACKENDS": (
        "dvadmin.utils.filters.CustomDjangoFilterBackend",  # 自定义过滤器后端
        "rest_framework.filters.SearchFilter",              # 搜索过滤器
        "rest_framework.filters.OrderingFilter",            # 排序过滤器
    ),
    # 默认分页类配置
    "DEFAULT_PAGINATION_CLASS": "dvadmin.utils.pagination.CustomPagination",
    # 默认认证类配置
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # JWT 认证
        "rest_framework.authentication.SessionAuthentication",        # 会话认证
    ),
    # 默认权限类配置
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",  # 只有经过身份认证的用户才能访问
    ],
    # 自定义异常处理器
    "EXCEPTION_HANDLER": "dvadmin.utils.exception.CustomExceptionHandler",
}

# ================================================= #
# ******************** 认证配置 ******************** #
# ================================================= #

# 认证后端配置 - 使用自定义认证后端
AUTHENTICATION_BACKENDS = ["dvadmin.utils.backends.CustomBackend"]

# ================================================= #
# ****************** JWT 认证配置 ****************** #
# ================================================= #

# Simple JWT 配置
SIMPLE_JWT = {
    # Access Token 有效时长 - 24小时 (1440分钟)
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=1440),
    # Refresh Token 有效时长 - 1天
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    # JWT Token 前缀设置
    "AUTH_HEADER_TYPES": ("JWT",),
    # 是否轮转刷新令牌
    "ROTATE_REFRESH_TOKENS": True,
}

# ====================================#
# **************** Swagger 配置 *******#
# ====================================#

# Swagger API 文档配置
SWAGGER_SETTINGS = {
    # 基础样式配置
    "SECURITY_DEFINITIONS": {"basic": {"type": "basic"}},
    # 登录 URL 配置 - 查看接口文档需要登录时使用
    "LOGIN_URL": "apiLogin/",
    # 注销 URL 配置
    "LOGOUT_URL": "rest_framework:logout",
    # 接口文档中方法列表按首字母升序排列
    "APIS_SORTER": "alpha",
    # 支持 JSON 提交时，接口文档中包含 JSON 输入框
    "JSON_EDITOR": True,
    # 方法列表按字母排序
    "OPERATIONS_SORTER": "alpha",
    "VALIDATOR_URL": None,
    # 自动生成 Schema 类型 - 分组根据 URL 层级分，0、1 或 2 层
    "AUTO_SCHEMA_TYPE": 2,
    # 默认自动 Schema 类
    "DEFAULT_AUTO_SCHEMA_CLASS": "dvadmin.utils.swagger.CustomSwaggerAutoSchema",
}

# ================================================= #
# **************** 验证码配置 ********************* #
# ================================================= #

# Django Simple Captcha 验证码配置
CAPTCHA_IMAGE_SIZE = (160, 46)  # 验证码图片大小
CAPTCHA_LENGTH = 4              # 验证码字符个数
CAPTCHA_TIMEOUT = 1             # 验证码超时时间（分钟）
# 验证码输出格式
CAPTCHA_OUTPUT_FORMAT = "%(image)s %(text_field)s %(hidden_field)s "
CAPTCHA_FONT_SIZE = 36          # 字体大小
CAPTCHA_FOREGROUND_COLOR = "#64DAAA"  # 前景色（字体颜色）
CAPTCHA_BACKGROUND_COLOR = "#F5F7F4"  # 背景色
# 验证码噪声函数配置
CAPTCHA_NOISE_FUNCTIONS = (
    "captcha.helpers.noise_arcs",  # 添加弧线噪声
    # "captcha.helpers.noise_dots",  # 添加点噪声（已注释）
)
# 验证码挑战函数配置
# CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.random_char_challenge'  # 字母验证码
CAPTCHA_CHALLENGE_FUNCT = "captcha.helpers.math_challenge"  # 数学运算验证码（加减乘除）

# ================================================= #
# ******************** 其他配置 ******************** #
# ================================================= #

# 默认自动字段类型
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# API 日志功能配置
API_LOG_ENABLE = True  # 启用 API 日志记录
# API_LOG_METHODS = 'ALL'  # 记录所有 HTTP 方法的日志
API_LOG_METHODS = ["POST", "UPDATE", "DELETE", "PUT"]  # 只记录这些方法的日志

# API 模块映射配置 - 用于日志记录中的模块识别
API_MODEL_MAP = {
    "/token/": "登录模块",
    "/api/login/": "登录模块",
    "/api/plugins_market/plugins/": "插件市场",
}

# Celery 异步任务配置
DJANGO_CELERY_BEAT_TZ_AWARE = False  # Celery Beat 时区感知设置
CELERY_TIMEZONE = "Asia/Shanghai"    # Celery 时区配置

# 静态文件压缩存储配置 - 用于生产环境性能优化
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# 系统运行时动态配置
ALL_MODELS_OBJECTS = []      # 所有应用的模型对象列表
INITIALIZE_LIST = []         # 初始化需要执行的列表
INITIALIZE_RESET_LIST = []   # 重置初始化需要执行的列表

# 数据库表前缀配置
TABLE_PREFIX = locals().get('TABLE_PREFIX', "")

# 系统配置缓存
SYSTEM_CONFIG = {}     # 系统配置字典
DICTIONARY_CONFIG = {} # 数据字典配置

# ================================================= #
# ******************** 插件配置 ******************** #
# ================================================= #

# 租户共享应用配置 - 多租户系统中的共享应用
TENANT_SHARED_APPS = []

# 插件 URL 模式列表 - 动态加载的插件 URL 配置
PLUGINS_URL_PATTERNS = []

# ********** 一键导入插件配置开始 **********
# 以下为插件配置的动态导入，根据需要启用相应插件
# 示例插件导入：
# from dvadmin_upgrade_center.settings import *    # 升级中心插件
from dvadmin3_celery.settings import *            # Celery 异步任务插件
# from dvadmin_third.settings import *            # 第三方用户管理插件
# from dvadmin_ak_sk.settings import *            # 秘钥管理插件
# from dvadmin_tenants.settings import *          # 租户管理插件
# from dvadmin_social_auth.settings import *      # 社交认证插件
# from dvadmin_uniapp.settings import *           # UniApp 插件
# ... 更多插件配置
# ********** 一键导入插件配置结束 **********
