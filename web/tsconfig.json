{
	"compilerOptions": {
		/* 访问 https://aka.ms/tsconfig.json 了解更多关于此文件的信息 */

		/* 基本选项 */
		// "incremental": true,                   /* 启用增量编译 */
		"target": "esnext" /* 指定 ECMAScript 目标版本: 'ES3' (默认), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 或 'ESNEXT' */,
		"module": "esnext" /* 指定模块代码生成: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', 或 'ESNext' */,
		"lib": ["esnext", "dom", "dom.iterable", "scripthost"] /* 指定要包含在编译中的库文件 */,
		// "allowJs": true,                       /* 允许编译 javascript 文件 */
		// "checkJs": true,                       /* 报告 .js 文件中的错误 */
		"jsx": "preserve" /* 指定 JSX 代码生成: 'preserve', 'react-native', 或 'react' */,
		// "declaration": true /* 生成相应的 '.d.ts' 文件 */,
		// "declarationMap": true,                /* 为每个相应的 '.d.ts' 文件生成源映射 */
		// "sourceMap": true,                     /* 生成相应的 '.map' 文件 */
		// "outFile": "./",                       /* 连接并将输出发送到单个文件 */
		// "outDir": "./",                        /* 将输出结构重定向到目录 */
		// "rootDir": "./",                       /* 指定输入文件的根目录。用于通过 --outDir 控制输出目录结构 */
		// "composite": true,                     /* 启用项目编译 */
		// "tsBuildInfoFile": "./",               /* 指定文件以存储增量编译信息 */
		// "removeComments": true,                /* 不向输出发出注释 */
		// "noEmit": true,                        /* 不发出输出 */
		// "importHelpers": true /* 从 'tslib' 导入发出助手 */,
		// "downlevelIteration": true /* 在针对 'ES5' 或 'ES3' 时，为 'for-of'、spread 和 destructuring 中的可迭代对象提供完全支持 */,
		"isolatedModules": true /* 将每个文件作为单独的模块进行转译（类似于 'ts.transpileModule'） */,

		/* 严格类型检查选项 */
		"strict": true /* 启用所有严格类型检查选项 */,
		// "noImplicitAny": true,                 /* 在具有隐含 'any' 类型的表达式和声明上引发错误 */
		// "strictNullChecks": true,              /* 启用严格的空检查 */
		// "strictFunctionTypes": true,           /* 启用函数类型的严格检查 */
		// "strictBindCallApply": true,           /* 启用函数上 'bind'、'call' 和 'apply' 方法的严格检查 */
		// "strictPropertyInitialization": true,  /* 启用类中属性初始化的严格检查 */
		// "noImplicitThis": true,                /* 在具有隐含 'any' 类型的 'this' 表达式上引发错误 */
		// "alwaysStrict": true,                  /* 以严格模式解析并为每个源文件发出 "use strict" */

		/* 附加检查 */
		// "noUnusedLocals": true,                /* 报告未使用的局部变量错误 */
		// "noUnusedParameters": true,            /* 报告未使用的参数错误 */
		// "noImplicitReturns": true,             /* 当函数中并非所有代码路径都返回值时报告错误 */
		// "noFallthroughCasesInSwitch": true,    /* 报告 switch 语句中 fallthrough 情况的错误 */
		// "noUncheckedIndexedAccess": true,      /* 在索引签名结果中包含 'undefined' */

		/* 模块解析选项 */
		"moduleResolution": "node" /* 指定模块解析策略: 'node' (Node.js) 或 'classic' (TypeScript pre-1.6) */,
		"baseUrl": "." /* 解析非绝对模块名的基目录 */,
		"paths": {
			"/@/*": ["src/*"]
		} /* 一系列条目，将导入重新映射到相对于 'baseUrl' 的查找位置 */,
		// "rootDirs": [],                        /* 根文件夹列表，其组合内容表示运行时项目的结构 */
		// "typeRoots": [],                       /* 要包含类型定义的文件夹列表 */
		"types": ["vite/client"] /* 要包含在编译中的类型声明文件 */,
		"allowSyntheticDefaultImports": true /* 允许从没有默认导出的模块进行默认导入。这不影响代码发出，只是类型检查 */,
		"esModuleInterop": true /* 通过为所有导入创建命名空间对象，实现 CommonJS 和 ES 模块之间的发出互操作性。隐含 'allowSyntheticDefaultImports' */,
		// "preserveSymlinks": true,              /* 不解析符号链接的真实路径 */
		// "allowUmdGlobalAccess": true,          /* 允许从模块访问 UMD 全局变量 */

		/* 源映射选项 */
		// "sourceRoot": "",                      /* 指定调试器应该定位 TypeScript 文件而不是源位置的位置 */
		// "mapRoot": "",                         /* 指定调试器应该定位映射文件而不是生成位置的位置 */
		// "inlineSourceMap": true,               /* 发出带有源映射的单个文件，而不是单独的文件 */
		// "inlineSources": true,                 /* 在单个文件中与源映射一起发出源；需要设置 '--inlineSourceMap' 或 '--sourceMap' */

		/* 实验性选项 */
		"experimentalDecorators": true /* 启用对 ES7 装饰器的实验性支持 */,
		// "emitDecoratorMetadata": true,         /* 启用为装饰器发出类型元数据的实验性支持 */

		/* 高级选项 */
		"skipLibCheck": true /* 跳过声明文件的类型检查 */,
		"forceConsistentCasingInFileNames": true /* 禁止对同一文件的大小写不一致引用 */,
		"suppressImplicitAnyIndexErrors": false
	},
	"include": ["src/**/*.ts", "src/**/*.vue", "src/**/*.tsx", "src/**/*.d.ts"], // **表示任意目录，*表示任意文件。表示 src 目录下的所有文件都会被编译
	"exclude": ["node_modules", "dist"] // 表示不需要编译的文件目录
}
